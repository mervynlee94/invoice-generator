components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [user, admin]
        companyInfo:
          type: object
          properties:
            businessRegistrationNumber:
              type: string
            name:
              type: string
            email:
              format: email
              type: string
            address:
              type: object
              properties:
                street:
                  type: string
                zipCode:
                  type: string
                city:
                  type: string
                state:
                  type: string
            contactNumber:
              type: string
            paymentInfo:
              type: object
              properties:
                bankTransfer:
                  type: object
                  properties:
                    bankName:
                      type: string
                    bankAccountNumber:
                      type: string
        invoiceInfo:
          type: object
          properties:
            prefix:
              type: string
            startCounter:
              type: number
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        role: user
        companyInfo:
          businessRegistrationNumber: '201901000005'
          name: Urban Algo
          email: fake@example.com
          address:
            street: 88-16-07, Cangkat Bukit Gambir 2
            zipCode: '11700'
            city: Gelugor
            state: Pulau Pinang
          contactNumber: +6016-4067895
          paymentInfo:
            bankTransfer:
              bankName: Maybank
              bankAccountNumber: '157157914061'
        invoiceInfo:
          prefix: INV
          startCounter: 1

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
